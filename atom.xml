<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[t.taira blog]]></title>
  <link href="http://t-taira.github.com/atom.xml" rel="self"/>
  <link href="http://t-taira.github.com/"/>
  <updated>2012-06-19T10:08:27+09:00</updated>
  <id>http://t-taira.github.com/</id>
  <author>
    <name><![CDATA[t-taira]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unicorn+ApacheでRailsを動かす]]></title>
    <link href="http://t-taira.github.com/blog/2012/06/17/unicorn-plus-apache/"/>
    <updated>2012-06-17T17:27:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/06/17/unicorn-plus-apache</id>
    <content type="html"><![CDATA[<h2>Apacheのモジュールを有効化</h2>

<pre><code>sudo a2enmod proxy
sudo a2enmod proxy_balancer
sudo a2enmod proxy_http
sudo a2enmod rewrite

sudo /etc/init.d/apache2 restart
</code></pre>

<h2>Unicornをインストール</h2>

<pre><code>gem install unicorn
</code></pre>

<h2>Apacheの設定</h2>

<pre><code>sudo vim /etc/apache2/conf.d/railsapp.conf

&lt;VirtualHost *:80&gt;
    ServerName domain.com       
    ServerAlias www.domain.com

    # Point this to your public folder of teambox
    DocumentRoot /home/username/railsapp/public

    RewriteEngine On

    &lt;Proxy balancer://railsapp&gt;
    BalancerMember http://127.0.0.1:3000 loadfactor=10
    &lt;/Proxy&gt;

# Redirect all non-static requests to thin
RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f
RewriteRule ^/(.*)$ balancer://railsapp%{REQUEST_URI} [P,QSA,L]

ProxyPass / balancer://railsapp/
ProxyPassReverse / balancer://railsapp/
ProxyPreserveHost on

&lt;Proxy *&gt;
    Order deny,allow
    Allow from all
&lt;/Proxy&gt;

# Custom log file locations
ErrorLog  /home/username/railsapp/log/error.log
CustomLog /home/username/railsapp/access.log combined
&lt;/VirtualHost&gt;
</code></pre>

<h2>Unicornの設定</h2>

<pre><code>vim config/unicorn.conf
# See http://unicorn.bogomips.org/Unicorn/Configurator.html for complete
# See also http://unicorn.bogomips.org/examples/unicorn.conf.rb for
rails_env = 'production'
worker_processes 3
working_directory '/home/username/railsapp'
port = 3000
listen port, :tcp_nopush =&gt; true
timeout 30
pid 'tmp/pids/unicorn.pid'
preload_app  true
stderr_path 'log/unicorn.log'
stdout_path 'log/unicorn.log'

before_fork do |server, worker|
defined?(ActiveRecord::Base) and
　　ActiveRecord::Base.connection.disconnect!
end

after_fork do |server, worker|
defined?(ActiveRecord::Base) and
　　ActiveRecord::Base.establish_connection
end
</code></pre>

<h2>Unicornを起動</h2>

<pre><code>unicorn_rails -D -c /home/username/railsapp/config/unicorn.conf
</code></pre>

<h2>Apacheを起動</h2>

<pre><code>sudo apt-get install libapache2-mod-xsendfile
sudo /etc/init.d/apache2 restart
</code></pre>

<p>Sorce:
<a href="https://github.com/teambox/teambox/wiki/Installing-on-Ubuntu-using-Apache-and-Unicorn">Installing on Ubuntu using Apache and Unicorn</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu12.04にRedmine2.0をインストール]]></title>
    <link href="http://t-taira.github.com/blog/2012/06/17/redmine-install/"/>
    <updated>2012-06-17T17:15:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/06/17/redmine-install</id>
    <content type="html"><![CDATA[<h2>install</h2>

<p>必要なライブラリをインストール</p>

<pre><code>sudo aptitude install imagemagick libimagemagick libmagickcore libmagickcore-dev libmagickwand-dev
</code></pre>

<h2>Redmine2.0をインストール</h2>

<pre><code>svn checkout http://redmine.rubyforge.org/svn/branches/2.0-stable redmine
cd redmine/
mv config/database.yml.example config/database.yml

vim config/database.yml
production:
    adapter: mysql2 # ココ修正
    database: redmine_production
    host: localhost
    username: root
    password: 
    encoding: utf8

    bundle install --without development test postgresql sqlite
    rake generate_secret_token
    RAILS_ENV=production rake db:create
    RAILS_ENV=production rake db:migrate
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu12.04にsubversionをインストール]]></title>
    <link href="http://t-taira.github.com/blog/2012/06/17/ubuntu12-dot-04-subversion-install/"/>
    <updated>2012-06-17T09:00:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/06/17/ubuntu12-dot-04-subversion-install</id>
    <content type="html"><![CDATA[<h2>Apache, subversionのインストール</h2>

<pre><code>sudo apt-get install apache2 subversion subversion-tools libapache2-svn

sudo mkdir /var/lib/svn
sudo svnadmin create /var/lib/svn/repos
sudo chown -R www-data. /var/lib/svn/

sudo htpasswd -c /etc/apache2/dav_svn.passwd [username]
New password: 
Re-type new password: 
Adding password for user [username]

sudo vi /etc/apache2/mods-enabled/dav_svn.conf
&lt;Location /svn&gt;
        DAV svn
        SVNParentPath /var/lib/svn

        AuthType Basic
        AuthName "Subversion Repository"
        AuthUserFile /etc/apache2/dav_svn.passwd
        Require valid-user
&lt;/Location&gt;

sudo service apache2 restart
</code></pre>

<h2>確認</h2>

<p>http://[Ubuntu12.04のIPアドレス]/svn/repos/</p>

<p>Source:
+ <a href="http://t-taira.github.com/blog/2012/06/16/ubuntu12-dot-04nirorhuan-jing-wogou-zhu-suru/">Ubuntu12.04にRoR環境を構築する</a>の続き</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu12.04にRoR環境を構築する]]></title>
    <link href="http://t-taira.github.com/blog/2012/06/16/ubuntu12-dot-04nirorhuan-jing-wogou-zhu-suru/"/>
    <updated>2012-06-16T17:08:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/06/16/ubuntu12-dot-04nirorhuan-jing-wogou-zhu-suru</id>
    <content type="html"><![CDATA[<h2>pkg install</h2>

<pre><code>sudo apt-get install build-essential bison openssl libreadline5 libreadline-dev zlib1g zlib1g-dev libssl-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev vim 
</code></pre>

<h2>ssh</h2>

<pre><code>sudo apt-get install openssh-server
</code></pre>

<h2>samba</h2>

<pre><code>sudo apt-get install samba

sudo smbpasswd -a [username]
sudo mkdir /home/[username]/samba
sudo chmod 777 /home/[username]/samba

sudo vim /etc/samba/smb.conf 

workgroup = WORKGROUP
hosts allow = 192.168.1. 127.
[homes]
browseable = no
writable = yes
create mask = 0744
directory mask = 0755
path = /home/[username]/samba
guest ok = yes 
share modes = no

sudo /etc/init.d/smbd restart
</code></pre>

<h2>mysql</h2>

<pre><code>sudo apt-get install mysql-server libmysqlclient-dev libmysql-ruby

sudo vim /etc/mysql/my.cnf

[client]
default-character-set=utf8

[mysqld]
character-set-server=utf8
skip-character-set-client-handshake

[mysql]
default-character-set=utf8
</code></pre>

<h2>rvm</h2>

<pre><code>sudo apt-get install curl git-core
curl -L get.rvm.io | bash -s stable
source ~/.rvm/scripts/rvm
rvm install 1.9.3
rvm use 1.9.3 --default
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[はじめてのOctopress]]></title>
    <link href="http://t-taira.github.com/blog/2012/06/11/hazimetefalseoctopress/"/>
    <updated>2012-06-11T01:18:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/06/11/hazimetefalseoctopress</id>
    <content type="html"><![CDATA[<h2>GitHubで新しくリポジトリを作成する</h2>

<p>Repository nameは「xxxxx@github.com」のような形式で登録する</p>

<p><img src="https://dl.dropbox.com/u/29480473/octopress/github_create_repo.png"></p>

<h2>SSH Keyの設定</h2>

<p><a href="https://github.com/settings/ssh">SSH Kyes</a>で、生成したキーを登録する</p>

<pre><code>$ cd ~/.ssh
$ ls
$ mkdir key_backup
$ cp id_rsa* key_backup
$ rm id_rsa*
$ ssh-keygen -t rsa -C "xxxxxx@gmail.com"
</code></pre>

<h2>Octopressのインストール</h2>

<pre><code>$ cd ~
$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress

$ sudo gem install bundler
$ sudo bundle install
$ rake install

$ rake setup_github_pages
Enter the read/write url for your repository: git@github.com:username/username.github.com.git

$ rake generate
$ rake deploy
</code></pre>

<h2>新しく記事を作成する</h2>

<pre><code>$ rake new_post['test']

$ mkdir -p source/_posts
Creating new post: source/_posts/2012-06-11-test.markdown 

$ vi source/_posts/2012-06-11-test.markdown  
---
layout: post
title: "test"
date: 2012-06-11 01:15
comments: true
categories: test
---

hello octopress
</code></pre>

<h2>完成</h2>

<p>できあがりはこんな感じ。
<img src="https://dl.dropbox.com/u/29480473/octopress/octopress_top.png"></p>

<p>Source: <a href="http://octopress.org/">Octopress</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Herokuのコマンド、Add-onsのメモ]]></title>
    <link href="http://t-taira.github.com/blog/2012/06/11/herokufalsekomando%2C-add-onsfalsememo/"/>
    <updated>2012-06-11T00:47:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/06/11/herokufalsekomando,-add-onsfalsememo</id>
    <content type="html"><![CDATA[<h2>Log</h2>

<p>リアルタイムログを表示する</p>

<pre><code>$ heroku logs --tail
</code></pre>

<h2>メンテナンス画面への切換え</h2>

<p>ON</p>

<pre><code>$ heroku maintenance:on
</code></pre>

<p>OFF</p>

<pre><code>$ heroku maintenance:off
</code></pre>

<h2>タイムゾーンの変更</h2>

<pre><code>$ heroku config:add TZ=Asia/Tokyo
</code></pre>

<h2>Heroku Scheduler</h2>

<p>Every 10 minutes / Hourly / Daily が設定可能
<img src="https://dl.dropbox.com/u/29480473/octopress/heroku_scheduler.png"></p>

<pre><code>$ heroku addons:add scheduler:standard
</code></pre>

<h2>SendGrid</h2>

<p>1日200通（無料）</p>

<pre><code>$ heroku addons:add sendgrid:starter
</code></pre>

<h2>New Relic</h2>

<p>パフォーマンス計測と運用状況のモニタリング</p>

<pre><code>$ heroku addons:add newrelic:standard
</code></pre>

<p>Source: <a href="https://addons.heroku.com/">Heroku | Add-ons</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello-octopress]]></title>
    <link href="http://t-taira.github.com/blog/2012/06/10/hello-octopress/"/>
    <updated>2012-06-10T20:33:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/06/10/hello-octopress</id>
    <content type="html"><![CDATA[<h2>this is test post&#8230;</h2>

<p><img src="https://dl.dropbox.com/u/29480473/pig.png" title="" ></p>

<p><a href="http://google.com">google</a>へのリンク</p>
]]></content>
  </entry>
  
</feed>
