<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[t.taira blog]]></title>
  <link href="http://t-taira.github.com/atom.xml" rel="self"/>
  <link href="http://t-taira.github.com/"/>
  <updated>2012-09-02T17:15:27+09:00</updated>
  <id>http://t-taira.github.com/</id>
  <author>
    <name><![CDATA[t-taira]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu12.04 + Rails3.2.8で開発環境を作る]]></title>
    <link href="http://t-taira.github.com/blog/2012/09/02/ubuntu1204-plus-rails328/"/>
    <updated>2012-09-02T16:24:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/09/02/ubuntu1204-plus-rails328</id>
    <content type="html"><![CDATA[<p>Railsの新しい環境を作成した時のメモ。以下、苦労したところ。<br/></p>

<ul>
<li>nginx + unicornの連携</li>
<li>capistranoの設定まわり</li>
</ul>


<h2>ssh</h2>

<pre><code>$ sudo apt-get install openssh-server
</code></pre>

<h2>pkg</h2>

<pre><code>$ sudo apt-get install nodejs libxslt-dev libxml2-dev vim curl build-essential bison openssl libreadline5 libreadline-dev zlib1g zlib1g-dev libssl-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev 
</code></pre>

<h2>samba</h2>

<pre><code>$ sudo apt-get install samba

$ sudo smbpasswd -a takao
$ sudo mkdir /home/takao/samba
$ sudo chmod 777 /home/takao/samba

$ sudo nano /etc/samba/smb.conf 

/etc/samba/smb.conf

workgroup = WORKGROUP
hosts allow = 192.168.1. 127.
[homes]
browseable = no
writable = yes
create mask = 0744
directory mask = 0755
path = /home/takao/samba
guest ok = yes 
share modes = no

$ sudo /etc/init.d/smbd restart
</code></pre>

<h2>rvm</h2>

<pre><code>$ curl -L get.rvm.io | bash -s stable
$ source ~/.rvm/scripts/rvm
$ rvm requirements
$ rvm install 1.9.3
$ rvm use 1.9.3 --default

$ ruby -v
ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-linux]

$ gem -v
1.8.24
</code></pre>

<h2>.gemrc</h2>

<pre><code>$ vim ~/.gemrc 
gem: --no-ri --no-rdoc
</code></pre>

<h2>rails</h2>

<pre><code>$ gem install rails
$ rails new sample
$ cd sample 

$ vim .rvmrc 
rvm use 1.9.3@global
rvm_trust_rvmrcs_flag=1

$ vim .svnignore 
nbproject
log/*
tmp/*
config/database.yml
public/assets
._.*
.
db/*.sqlite3

$ rails g controller welcome index
</code></pre>

<h2>gem</h2>

<pre><code>$ vim Gemfile
source 'https://rubygems.org'

gem 'rails', '3.2.8'

# Bundle edge Rails instead:
# gem 'rails', :git =&gt; 'git://github.com/rails/rails.git'

gem 'sqlite3'


# Gems used only for assets and not required
# in production environments by default.
group :assets do
  gem 'sass-rails',   '~&gt; 3.2.3'
  gem 'coffee-rails', '~&gt; 3.2.1'

  # See https://github.com/sstephenson/execjs#readme for more supported runtimes
  # gem 'therubyracer', :platforms =&gt; :ruby

  gem 'uglifier', '&gt;= 1.0.3'
end

gem 'jquery-rails'

# To use ActiveModel has_secure_password
# gem 'bcrypt-ruby', '~&gt; 3.0.0'

# To use Jbuilder templates for JSON
# gem 'jbuilder'

# Use unicorn as the app server
gem 'unicorn'

# Deploy with Capistrano
group :deployment do
  gem 'capistrano'
  gem 'capistrano_colors'
  gem 'rvm-capistrano'
end

# To use debugger
# gem 'debugger'

gem 'execjs'
gem 'therubyracer'
gem 'mysql2'
gem 'nokogiri'
gem 'i18n_generators'
gem 'selectable_attr'
gem 'whenever', :require =&gt; false
gem 'acts-as-taggable-on'
gem 'settingslogic'
gem 'devise'
gem 'kaminari'
gem 'meta_search'
gem 'rails3_acts_as_paranoid'
gem 'httpclient'
gem 'rspec-rails'
gem 'net-ssh-gateway'
gem 'bigdecimal'
gem 'io-console'
gem 'json'
gem 'minitest'
gem 'rake'
gem 'rdoc'
gem 'addressable'
gem 'delayed_job_active_record'

# Heroku :
group :production do
  gem 'thin'
  gem 'pg'
end
</code></pre>

<h2>unicorn</h2>

<pre><code>$ vim config/unicorn.rb 
application = 'sample'

listen "/tmp/unicorn_#{application}.sock"
pid "/tmp/unicorn_#{application}.pid"

worker_processes 4;
timeout 30
preload_app true

if ENV['RAILS_ENV'] == 'production'
  shared_path = "/home/takao/capistrano//#{application}/shared"
  stderr_path "#{shared_path}/log/unicorn.stderr.log"
  stdout_path "#{shared_path}/log/unicorn.stdout.log"
end

before_fork do |server, worker|
  # マスタープロセスの接続を解除
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.connection.disconnect!
  end
  # 古いマスタープロセスをKILL
  old_pid = "/tmp/unicorn.pid.oldbin"
  if File.exists?(old_pid) &amp;&amp; server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end

after_fork do |server, worker|
  # preload_app=trueの場合は必須
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.establish_connection
  end
end
</code></pre>

<h2>nginx</h2>

<pre><code>sudo apt-get install nginx

$ vim /etc/nginx/sites-available/sample 
upstream unicorn_app {
  server unix:/tmp/unicorn_sample.sock fail_timeout=0;
}
server {
    listen 80;
    server_name _;

    root /home/takao/capistrano/sample/current/public;
    access_log /var/log/nginx/sample_log;
    rewrite_log on;

    location / {
        # 全リクエストをUNIX socketへ
        proxy_pass  http://unicorn_app;
        proxy_redirect     off;

        proxy_set_header   Host             $host;
        proxy_set_header   X-Real-IP        $remote_addr;
        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;

        client_max_body_size       10m;
        client_body_buffer_size    128k;

        proxy_connect_timeout      90;
        proxy_send_timeout         90;
        proxy_read_timeout         90;

        proxy_buffer_size          4k;
        proxy_buffers              4 32k;
        proxy_busy_buffers_size    64k;
        proxy_temp_file_write_size 64k;
    }

    location ~* \.(ico|css|js|gif|jpe?g|png)(\?[0-9]+)?$ {
      expires 1y;
      add_header Cache-Control public;

      # http://guides.rubyonrails.org/asset_pipeline.html#server-configuration
      add_header Last-Modified "";
      add_header ETag "";
    }

    # Rails 3.1's asset pipe_line用に何か必要かもしれないらしい..
    #location ~ ^/(images|javascripts|stylesheets|system)/  {
    #  root /var/www/sample/current/public;
    #  expires max;
    #  break;
    #}
}

$ cd /etc/nginx/sites-enabled/
$ sudo ls -s /etc/nginx/sites-available
</code></pre>

<h2>mysql</h2>

<pre><code>sudo apt-get install mysql-server libmysqlclient-dev libmysql-ruby
sudo apt-get install libpq-dev
</code></pre>

<h2>svn</h2>

<pre><code>&lt;Location /repos/takao&gt;
   DAV svn
   SVNPath /var/www/svn/takao

   AuthType Basic
   AuthName "Authorization Realm (hal-new/takao)" 
   AuthUserFile /var/www/svn/.svnpasswd
   Require valid-user
&lt;/Location&gt;

$ svn co http://xxx.xxx.xxx.xxx/svn/takao
</code></pre>

<h2>capistrano</h2>

<pre><code>$ capify .

$ cat config/deploy.rb 
# capistranoの出力がカラーになる
require 'capistrano_colors'

# cap deploy時に自動で bundle install が実行される
require "bundler/capistrano"

# RVMを利用している場合は必要
#$:.unshift(File.expand_path('./lib', ENV['rvm_path']))
require 'rvm/capistrano'
set :rvm_ruby_string, '1.9.3'
set :rvm_type, :user

# リポジトリの設定
set :application, "sample"
set :scm, :subversion
set :repository,  "http://xxx.xxx.xxx.xxx/repos/takao/sample"
set :scm_username, "takao"
set :scm_password, "takao"

set :deploy_via, :remote_cache
#set :deploy_to, "/var/www/#{application}"
set :deploy_to, "/home/haladmin/capistrano/#{application}"
set :rails_env, "production"
set :keep_releases, 5

# SSHの設定
set :user, "xxxxxx"
set :password, "xxxxxx"
ssh_options[:port] = "22"
ssh_options[:forward_agent] = true
default_run_options[:pty] = true

# role (全部同じIPでOK)
role :web, "127.0.0.1"
role :app, "127.0.0.1"
role :db,  "127.0.0.1", :primary =&gt; true

# precompile
load 'deploy/assets'

# cap deploy:setup 後、/var/www/sample の権限変更
namespace :setup do
  task :fix_permissions do
    sudo "chown -R #{user}.#{user} #{deploy_to}"
  end
end
after "deploy:setup", "setup:fix_permissions"

# Unicorn用に起動/停止タスクを変更
namespace :deploy do
  task :start, :roles =&gt; :app do
    run "cd #{current_path}; bundle exec unicorn_rails -c config/unicorn.rb -E #{rails_env} -D"
  end
  task :restart, :roles =&gt; :app do
    if File.exist? "/tmp/unicorn_#{application}.pid"
      run "kill -s USR2 `cat /tmp/unicorn_#{application}.pid`"
    end
  end
  task :stop, :roles =&gt; :app do
    run "kill -s QUIT `cat /tmp/unicorn_#{application}.pid`"
  end
end

$ cap deploy:setup


$ cap deploy:start
$ cap deploy:stop
</code></pre>

<p>:Source http://d.hatena.ne.jp/ntaku/20111115/1321358900</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Padrino+MySQL+ARのアプリをHeorkuにデプロイする]]></title>
    <link href="http://t-taira.github.com/blog/2012/06/26/padrino-plus-heroku/"/>
    <updated>2012-06-26T23:47:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/06/26/padrino-plus-heroku</id>
    <content type="html"><![CDATA[<p>「ビュッフェスタイル」な開発ができるということで、Padrinoを使ってみました。</p>

<pre><code>$ gem install padrino

$ padrino g project sandbox -t rspec -e erb -c sass -s jquery -d activerecord -a mysql -b

$ cd sandbox
$ padrino g admin # 管理画面を作成
$ bundle install  

$ padrino g model dog name:string
$ padrino g admin_page dog

$ padrino rake ar:create
$ padrino rake ar:migrate
$ padrino rake seed 

$ padrino start
</code></pre>

<p>Herokuにデプロイ</p>

<pre><code>$ git init
$ git add .
$ git commit -m "initial commit for app"

$ heroku create
$ git push heroku master
</code></pre>

<p>Herokuのデプロイ後にエラーになったので、<a href="http://www.padrinorb.com/guides/blog-tutorial">Guides Blog Tutorial - Padrino Ruby Web Framework</a>を参考にDB設定等を変更しました。</p>

<pre><code>ERROR Mysql::Error: Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)
</code></pre>

<p>Gemfileに追加</p>

<pre><code># Gemfile
group :production do
 gem 'pg'
end
</code></pre>

<p>productionのDB設定を変更</p>

<pre><code># config/database.rb
postgres = URI.parse(ENV['DATABASE_URL'] || '')

ActiveRecord::Base.configurations[:production] = {
  :adapter  =&gt; 'postgresql',
  :encoding =&gt; 'utf8',
  :database =&gt; postgres.path[1..-1], 
  :username =&gt; postgres.user,
  :password =&gt; postgres.password,
  :host     =&gt; postgres.host
}
</code></pre>

<p>Rakefileを作成</p>

<pre><code>$ padrino rake gen
</code></pre>

<p>Rakefileを確認</p>

<pre><code># Rakefile
require File.dirname(__FILE__) + '/config/boot.rb'
require 'thor'
require 'padrino-core/cli/rake'

PadrinoTasks.init
</code></pre>

<p>Heroku dbマイグレート</p>

<pre><code>$ heroku rake ar:migrate
$ heroku rake seed
</code></pre>

<p>開発環境のDBをHerokuにpush</p>

<pre><code>$ heroku db:push mysql://root:password@localhost/sandbox_development
</code></pre>

<p>ruby-1.9.3でheroku db:pushしたところ、エラーになったのでruby-1.9.2に変更しました。</p>

<pre><code>accounts:        0% |                          
Saving session to push_201206200143.dat..
!!! Caught Server Exception
HTTP CODE: 500
Taps Server Error: PGError: ERROR:  time zone displacement out of range: "2012-06-26 12:00:00.000000+5894652000"
</code></pre>

<p>.rvmrcを新規作成</p>

<pre><code># .rvmrc
rvm 1.9.2
</code></pre>

<p>gem再インストール</p>

<pre><code>gem install heroku sqlite3 taps
bundle install
</code></pre>

<ul>
<li>ログイン画面</li>
</ul>


<p><img src="https://dl.dropbox.com/u/29480473/octopress/padri-no-login.png"></p>

<ul>
<li>管理画面</li>
</ul>


<p><img src="https://dl.dropbox.com/u/29480473/octopress/padrino-admin.png"></p>

<p>Source:
<a href="http://www.padrinorb.com/guides/blog-tutorial">Guides Blog Tutorial - Padrino Ruby Web Framework</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVNのインポートコマンド]]></title>
    <link href="http://t-taira.github.com/blog/2012/06/19/svn-import/"/>
    <updated>2012-06-19T10:39:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/06/19/svn-import</id>
    <content type="html"><![CDATA[<p>備忘録で書いておきます。</p>

<pre><code>svn import Project http://[server ip]/svn/repos/Project -m "first import project"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicorn+ApacheでRailsを動かす]]></title>
    <link href="http://t-taira.github.com/blog/2012/06/17/unicorn-plus-apache/"/>
    <updated>2012-06-17T17:27:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/06/17/unicorn-plus-apache</id>
    <content type="html"><![CDATA[<h2>Apacheのモジュールを有効化</h2>

<pre><code>sudo a2enmod proxy
sudo a2enmod proxy_balancer
sudo a2enmod proxy_http
sudo a2enmod rewrite

sudo /etc/init.d/apache2 restart
</code></pre>

<h2>Unicornをインストール</h2>

<pre><code>gem install unicorn
</code></pre>

<h2>Apacheの設定</h2>

<pre><code>#/etc/apache2/conf.d/railsapp.conf

&lt;VirtualHost *:80&gt;
    ServerAdmin admin@localhost
    ServerName localhost
    DocumentRoot /home/username/railsapp/current/public

    ProxyRequests Off

    &lt;Proxy *&gt;
        Order deny,allow
        Allow from all
    &lt;/Proxy&gt;

    ProxyPass / http://localhost:3000/
    ProxyPassReverse / http://localhost:3000/

    # Custom log file locations
    ErrorLog  /home/username/railsapp/shared/log/error.log
    CustomLog /home/username/railsapp/shared/log/access.log combined
&lt;/VirtualHost&gt;
~
</code></pre>

<h2>Unicornの設定</h2>

<pre><code>#config/unicorn.conf

# See http://unicorn.bogomips.org/Unicorn/Configurator.html for complete
# See also http://unicorn.bogomips.org/examples/unicorn.conf.rb for
rails_env = 'production'
worker_processes 3
working_directory '/home/username/railsapp'
port = 3000
listen port, :tcp_nopush =&gt; true
timeout 30
pid 'tmp/pids/unicorn.pid'
preload_app  true
stderr_path 'log/unicorn.log'
stdout_path 'log/unicorn.log'

before_fork do |server, worker|
defined?(ActiveRecord::Base) and
　　ActiveRecord::Base.connection.disconnect!
end

after_fork do |server, worker|
defined?(ActiveRecord::Base) and
　　ActiveRecord::Base.establish_connection
end
</code></pre>

<h2>Unicornを起動</h2>

<pre><code>unicorn_rails -D -c /home/username/railsapp/config/unicorn.conf
</code></pre>

<h2>Apacheを起動</h2>

<pre><code>sudo apt-get install libapache2-mod-xsendfile
sudo /etc/init.d/apache2 restart
</code></pre>

<p>Sorce:
<a href="https://github.com/teambox/teambox/wiki/Installing-on-Ubuntu-using-Apache-and-Unicorn">Installing on Ubuntu using Apache and Unicorn</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu12.04にRedmine2.0をインストール]]></title>
    <link href="http://t-taira.github.com/blog/2012/06/17/redmine-install/"/>
    <updated>2012-06-17T17:15:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/06/17/redmine-install</id>
    <content type="html"><![CDATA[<h2>install</h2>

<p>必要なライブラリをインストール</p>

<pre><code>sudo aptitude install imagemagick libimagemagick libmagickcore libmagickcore-dev libmagickwand-dev
</code></pre>

<h2>Redmine2.0をインストール</h2>

<pre><code>svn checkout http://redmine.rubyforge.org/svn/branches/2.0-stable redmine
cd redmine/
mv config/database.yml.example config/database.yml

vim config/database.yml
production:
    adapter: mysql2 # ココ修正
    database: redmine_production
    host: localhost
    username: root
    password: 
    encoding: utf8

    bundle install --without development test postgresql sqlite
    rake generate_secret_token
    RAILS_ENV=production rake db:create
    RAILS_ENV=production rake db:migrate
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu12.04にsubversionをインストール]]></title>
    <link href="http://t-taira.github.com/blog/2012/06/17/ubuntu12-dot-04-subversion-install/"/>
    <updated>2012-06-17T09:00:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/06/17/ubuntu12-dot-04-subversion-install</id>
    <content type="html"><![CDATA[<h2>Apache, subversionのインストール</h2>

<pre><code>sudo apt-get install apache2 subversion subversion-tools libapache2-svn

sudo mkdir /var/lib/svn
sudo svnadmin create /var/lib/svn/repos
sudo chown -R www-data. /var/lib/svn/

sudo htpasswd -c /etc/apache2/dav_svn.passwd [username]
New password: 
Re-type new password: 
Adding password for user [username]

sudo vi /etc/apache2/mods-enabled/dav_svn.conf
&lt;Location /svn&gt;
        DAV svn
        SVNParentPath /var/lib/svn

        AuthType Basic
        AuthName "Subversion Repository"
        AuthUserFile /etc/apache2/dav_svn.passwd
        Require valid-user
&lt;/Location&gt;

sudo service apache2 restart
</code></pre>

<h2>確認</h2>

<p>http://[Ubuntu12.04のIPアドレス]/svn/repos/</p>

<p>Source:
+ <a href="http://t-taira.github.com/blog/2012/06/16/ubuntu12-dot-04nirorhuan-jing-wogou-zhu-suru/">Ubuntu12.04にRoR環境を構築する</a>の続き</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu12.04にRoR環境を構築する]]></title>
    <link href="http://t-taira.github.com/blog/2012/06/16/ubuntu12-dot-04nirorhuan-jing-wogou-zhu-suru/"/>
    <updated>2012-06-16T17:08:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/06/16/ubuntu12-dot-04nirorhuan-jing-wogou-zhu-suru</id>
    <content type="html"><![CDATA[<h2>pkg install</h2>

<pre><code>sudo apt-get install build-essential bison openssl libreadline5 libreadline-dev zlib1g zlib1g-dev libssl-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev vim 
</code></pre>

<h2>ssh</h2>

<pre><code>sudo apt-get install openssh-server
</code></pre>

<h2>samba</h2>

<pre><code>sudo apt-get install samba

sudo smbpasswd -a [username]
sudo mkdir /home/[username]/samba
sudo chmod 777 /home/[username]/samba

sudo vim /etc/samba/smb.conf 

workgroup = WORKGROUP
hosts allow = 192.168.1. 127.
[homes]
browseable = no
writable = yes
create mask = 0744
directory mask = 0755
path = /home/[username]/samba
guest ok = yes 
share modes = no

sudo /etc/init.d/smbd restart
</code></pre>

<h2>mysql</h2>

<pre><code>sudo apt-get install mysql-server libmysqlclient-dev libmysql-ruby

sudo vim /etc/mysql/my.cnf

[client]
default-character-set=utf8

[mysqld]
character-set-server=utf8
skip-character-set-client-handshake

[mysql]
default-character-set=utf8
</code></pre>

<h2>rvm</h2>

<pre><code>sudo apt-get install curl git-core
curl -L get.rvm.io | bash -s stable
source ~/.rvm/scripts/rvm
rvm install 1.9.3
rvm use 1.9.3 --default
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[はじめてのOctopress]]></title>
    <link href="http://t-taira.github.com/blog/2012/06/11/hazimetefalseoctopress/"/>
    <updated>2012-06-11T01:18:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/06/11/hazimetefalseoctopress</id>
    <content type="html"><![CDATA[<h2>GitHubで新しくリポジトリを作成する</h2>

<p>Repository nameは「xxxxx@github.com」のような形式で登録する</p>

<p><img src="https://dl.dropbox.com/u/29480473/octopress/github_create_repo.png"></p>

<h2>SSH Keyの設定</h2>

<p><a href="https://github.com/settings/ssh">SSH Kyes</a>で、生成したキーを登録する</p>

<pre><code>$ cd ~/.ssh
$ ls
$ mkdir key_backup
$ cp id_rsa* key_backup
$ rm id_rsa*
$ ssh-keygen -t rsa -C "xxxxxx@gmail.com"
</code></pre>

<h2>Octopressのインストール</h2>

<pre><code>$ cd ~
$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress

$ sudo gem install bundler
$ sudo bundle install
$ rake install

$ rake setup_github_pages
Enter the read/write url for your repository: git@github.com:username/username.github.com.git

$ rake generate
$ rake deploy
</code></pre>

<h2>新しく記事を作成する</h2>

<pre><code>$ rake new_post['test']

$ mkdir -p source/_posts
Creating new post: source/_posts/2012-06-11-test.markdown 

$ vi source/_posts/2012-06-11-test.markdown  
---
layout: post
title: "test"
date: 2012-06-11 01:15
comments: true
categories: test
---

hello octopress
</code></pre>

<h2>完成</h2>

<p>できあがりはこんな感じ。
<img src="https://dl.dropbox.com/u/29480473/octopress/octopress_top.png"></p>

<p>Source: <a href="http://octopress.org/">Octopress</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Herokuのコマンド、Add-onsのメモ]]></title>
    <link href="http://t-taira.github.com/blog/2012/06/11/herokufalsekomando%2C-add-onsfalsememo/"/>
    <updated>2012-06-11T00:47:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/06/11/herokufalsekomando,-add-onsfalsememo</id>
    <content type="html"><![CDATA[<h2>Log</h2>

<p>リアルタイムログを表示する</p>

<pre><code>$ heroku logs --tail
</code></pre>

<h2>メンテナンス画面への切換え</h2>

<p>ON</p>

<pre><code>$ heroku maintenance:on
</code></pre>

<p>OFF</p>

<pre><code>$ heroku maintenance:off
</code></pre>

<h2>タイムゾーンの変更</h2>

<pre><code>$ heroku config:add TZ=Asia/Tokyo
</code></pre>

<h2>Heroku Scheduler</h2>

<p>Every 10 minutes / Hourly / Daily が設定可能
<img src="https://dl.dropbox.com/u/29480473/octopress/heroku_scheduler.png"></p>

<pre><code>$ heroku addons:add scheduler:standard
</code></pre>

<h2>SendGrid</h2>

<p>1日200通（無料）</p>

<pre><code>$ heroku addons:add sendgrid:starter
</code></pre>

<h2>New Relic</h2>

<p>パフォーマンス計測と運用状況のモニタリング</p>

<pre><code>$ heroku addons:add newrelic:standard
</code></pre>

<p>Source: <a href="https://addons.heroku.com/">Heroku | Add-ons</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello-octopress]]></title>
    <link href="http://t-taira.github.com/blog/2012/06/10/hello-octopress/"/>
    <updated>2012-06-10T20:33:00+09:00</updated>
    <id>http://t-taira.github.com/blog/2012/06/10/hello-octopress</id>
    <content type="html"><![CDATA[<h2>this is test post&#8230;</h2>

<p><img src="https://dl.dropbox.com/u/29480473/pig.png" title="" ></p>

<p><a href="http://google.com">google</a>へのリンク</p>
]]></content>
  </entry>
  
</feed>
